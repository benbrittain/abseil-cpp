#
# Copyright 2019 The Abseil Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# ABSL random-number generation libraries.

load(
    "//absl/copts:configure_copts.bzl",
    "ABSL_DEFAULT_COPTS",
    "ABSL_DEFAULT_LINKOPTS",
    "ABSL_TEST_COPTS",
)



cxx_library(
    name = "random",
    exported_headers = ["random.h"],
    compiler_flags = ABSL_DEFAULT_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    visibility = ["PUBLIC"],
    deps = [
        ":distributions",
        ":seed_sequences",
        "//absl/random/internal:nonsecure_base",
        "//absl/random/internal:pcg_engine",
        "//absl/random/internal:pool_urbg",
        "//absl/random/internal:randen_engine",
    ],
)

cxx_library(
    name = "distributions",
    srcs = [
        "discrete_distribution.cc",
        "gaussian_distribution.cc",
    ],
    exported_headers = [
        "bernoulli_distribution.h",
        "beta_distribution.h",
        "discrete_distribution.h",
        "distributions.h",
        "exponential_distribution.h",
        "gaussian_distribution.h",
        "log_uniform_int_distribution.h",
        "poisson_distribution.h",
        "uniform_int_distribution.h",
        "uniform_real_distribution.h",
        "zipf_distribution.h",
    ],
    compiler_flags = ABSL_DEFAULT_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    visibility = ["PUBLIC"],
    exported_deps = [
        "//absl/base:base_internal",
        "//absl/base:config",
        "//absl/base:core_headers",
        "//absl/meta:type_traits",
        "//absl/numeric:bits",
        "//absl/random/internal:distribution_caller",
        "//absl/random/internal:fast_uniform_bits",
        "//absl/random/internal:fastmath",
        "//absl/random/internal:generate_real",
        "//absl/random/internal:iostream_state_saver",
        "//absl/random/internal:traits",
        "//absl/random/internal:uniform_helper",
        "//absl/random/internal:wide_multiply",
        "//absl/strings:strings",
    ],
)

cxx_library(
    name = "seed_gen_exception",
    srcs = ["seed_gen_exception.cc"],
    exported_headers = ["seed_gen_exception.h"],
    compiler_flags = ABSL_DEFAULT_COPTS,
    visibility = ["//absl/random/..."],
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    exported_deps = ["//absl/base:config"],
)

cxx_library(
    name = "seed_sequences",
    srcs = ["seed_sequences.cc"],
    exported_headers = [
        "seed_sequences.h",
    ],
    visibility = ["PUBLIC"],
    compiler_flags = ABSL_DEFAULT_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    exported_deps = [
        ":seed_gen_exception",
        "//absl/base:config",
        "//absl/random/internal:pool_urbg",
        "//absl/random/internal:salted_seed_seq",
        "//absl/random/internal:seed_material",
        "//absl/types:span",
    ],
)

cxx_library(
    name = "bit_gen_ref",
    exported_headers = ["bit_gen_ref.h"],
    compiler_flags = ABSL_DEFAULT_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    exported_deps = [
        ":random",
        "//absl/base:core_headers",
        "//absl/base:fast_type_id",
        "//absl/meta:type_traits",
        "//absl/random/internal:distribution_caller",
        "//absl/random/internal:fast_uniform_bits",
    ],
)

cxx_library(
    name = "mock_distributions",
    exported_headers = ["mock_distributions.h"],
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    exported_deps = [
        ":distributions",
        ":mocking_bit_gen",
        "//absl/meta:type_traits",
        "//absl/random/internal:mock_overload_set",
        "googletest//:gtest",
    ],
)

cxx_library(
    name = "mocking_bit_gen",
    exported_headers = [
        "mocking_bit_gen.h",
    ],
    visibility = ["PUBLIC"],
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    exported_deps = [
        ":distributions",
        ":random",
        "//absl/base:fast_type_id",
        "//absl/container:flat_hash_map",
        "//absl/meta:type_traits",
        "//absl/random/internal:distribution_caller",
        "//absl/strings:strings",
        "//absl/types:span",
        "//absl/types:variant",
        "//absl/utility:utility",
        "googletest//:gtest",
    ],
)

cxx_test(
    name = "bernoulli_distribution_test",
    srcs = ["bernoulli_distribution_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":distributions",
        ":random",
        "//absl/random/internal:pcg_engine",
        "//absl/random/internal:sequence_urbg",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "beta_distribution_test",
    srcs = ["beta_distribution_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":distributions",
        ":random",
        "//absl/base:raw_logging_internal",
        "//absl/numeric:representation",
        "//absl/random/internal:distribution_test_util",
        "//absl/random/internal:pcg_engine",
        "//absl/random/internal:sequence_urbg",
        "//absl/strings:strings",
        "//absl/strings:str_format",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "distributions_test",
    srcs = [
        "distributions_test.cc",
    ],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":distributions",
        ":random",
        "//absl/random/internal:distribution_test_util",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "generators_test",
    srcs = ["generators_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":distributions",
        ":random",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "log_uniform_int_distribution_test",
    srcs = [
        "log_uniform_int_distribution_test.cc",
    ],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":distributions",
        ":random",
        "//absl/base:raw_logging_internal",
        "//absl/random/internal:distribution_test_util",
        "//absl/random/internal:pcg_engine",
        "//absl/random/internal:sequence_urbg",
        "//absl/strings:strings",
        "//absl/strings:str_format",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "discrete_distribution_test",
    srcs = [
        "discrete_distribution_test.cc",
    ],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":distributions",
        ":random",
        "//absl/base:raw_logging_internal",
        "//absl/random/internal:distribution_test_util",
        "//absl/random/internal:pcg_engine",
        "//absl/random/internal:sequence_urbg",
        "//absl/strings:strings",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "poisson_distribution_test",
    srcs = [
        "poisson_distribution_test.cc",
    ],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":distributions",
        ":random",
        "//absl/base:core_headers",
        "//absl/base:raw_logging_internal",
        "//absl/container:flat_hash_map",
        "//absl/random/internal:distribution_test_util",
        "//absl/random/internal:pcg_engine",
        "//absl/random/internal:sequence_urbg",
        "//absl/strings:strings",
        "//absl/strings:str_format",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "exponential_distribution_test",
    srcs = ["exponential_distribution_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":distributions",
        ":random",
        "//absl/base:core_headers",
        "//absl/base:raw_logging_internal",
        "//absl/numeric:representation",
        "//absl/random/internal:distribution_test_util",
        "//absl/random/internal:pcg_engine",
        "//absl/random/internal:sequence_urbg",
        "//absl/strings:strings",
        "//absl/strings:str_format",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "gaussian_distribution_test",
    srcs = [
        "gaussian_distribution_test.cc",
    ],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":distributions",
        ":random",
        "//absl/base:core_headers",
        "//absl/base:raw_logging_internal",
        "//absl/numeric:representation",
        "//absl/random/internal:distribution_test_util",
        "//absl/random/internal:sequence_urbg",
        "//absl/strings:strings",
        "//absl/strings:str_format",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "uniform_int_distribution_test",
    srcs = [
        "uniform_int_distribution_test.cc",
    ],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":distributions",
        ":random",
        "//absl/base:raw_logging_internal",
        "//absl/random/internal:distribution_test_util",
        "//absl/random/internal:pcg_engine",
        "//absl/random/internal:sequence_urbg",
        "//absl/strings:strings",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "uniform_real_distribution_test",
    srcs = [
        "uniform_real_distribution_test.cc",
    ],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":distributions",
        ":random",
        "//absl/base:raw_logging_internal",
        "//absl/numeric:representation",
        "//absl/random/internal:distribution_test_util",
        "//absl/random/internal:pcg_engine",
        "//absl/random/internal:sequence_urbg",
        "//absl/strings:strings",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "zipf_distribution_test",
    srcs = [
        "zipf_distribution_test.cc",
    ],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":distributions",
        ":random",
        "//absl/base:raw_logging_internal",
        "//absl/random/internal:distribution_test_util",
        "//absl/random/internal:pcg_engine",
        "//absl/random/internal:sequence_urbg",
        "//absl/strings:strings",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "bit_gen_ref_test",
    srcs = ["bit_gen_ref_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":bit_gen_ref",
        ":random",
        "//absl/base:fast_type_id",
        "//absl/random/internal:sequence_urbg",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "mocking_bit_gen_test",
    srcs = ["mocking_bit_gen_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":bit_gen_ref",
        ":mock_distributions",
        ":mocking_bit_gen",
        ":random",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "mock_distributions_test",
    srcs = ["mock_distributions_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":mock_distributions",
        ":mocking_bit_gen",
        ":random",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "examples_test",
    srcs = ["examples_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":random",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "seed_sequences_test",
    srcs = ["seed_sequences_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":random",
        ":seed_sequences",
        "//absl/random/internal:nonsecure_base",
        "googletest//:gtest_main",
    ],
)

## Benchmarks for various methods / test utilities
#cxx_binary(
#    name = "benchmarks",
#    srcs = [
#        "benchmarks.cc",
#    ],
#    compiler_flags = ABSL_TEST_COPTS,
#    linker_flags = ABSL_DEFAULT_LINKOPTS,
#    tags = ["benchmark"],
#    deps = [
#        ":distributions",
#        ":random",
#        ":seed_sequences",
#        "//absl/base:core_headers",
#        "//absl/meta:type_traits",
#        "//absl/random/internal:fast_uniform_bits",
#        "//absl/random/internal:randen_engine",
#        "@com_github_google_benchmark//:benchmark_main",
#    ],
#)
