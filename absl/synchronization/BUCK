#
# Copyright 2017 The Abseil Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

load(
    "//absl/copts:configure_copts.bzl",
    "ABSL_DEFAULT_COPTS",
    "ABSL_DEFAULT_LINKOPTS",
    "ABSL_TEST_COPTS",
)

# Internal data structure for efficiently detecting mutex dependency cycles
cxx_library(
    name = "graphcycles_internal",
    srcs = [
        "internal/graphcycles.cc",
    ],
    exported_headers = [
        "internal/graphcycles.h",
    ],
    compiler_flags = ABSL_DEFAULT_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    visibility = [
        "//absl/...",
    ],
    exported_deps = [
        "//absl/base:base",
        "//absl/base:base_internal",
        "//absl/base:config",
        "//absl/base:core_headers",
        "//absl/base:malloc_internal",
        "//absl/base:raw_logging_internal",
    ],
)

cxx_library(
    name = "kernel_timeout_internal",
    srcs = ["internal/kernel_timeout.cc"],
    exported_headers = ["internal/kernel_timeout.h"],
    compiler_flags = ABSL_DEFAULT_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    exported_deps = [
        "//absl/base:base",
        "//absl/base:config",
        "//absl/base:core_headers",
        "//absl/base:raw_logging_internal",
        "//absl/time:time",
    ],
)

cxx_test(
    name = "kernel_timeout_internal_test",
    srcs = ["internal/kernel_timeout_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":kernel_timeout_internal",
        "//absl/base:config",
        "//absl/random:random",
        "//absl/time:time",
        "googletest//:gtest_main",
    ],
)

cxx_library(
    name = "synchronization",
    srcs = [
        "barrier.cc",
        "blocking_counter.cc",
        "internal/create_thread_identity.cc",
        "internal/futex_waiter.cc",
        "internal/per_thread_sem.cc",
        "internal/pthread_waiter.cc",
        "internal/sem_waiter.cc",
        "internal/stdcpp_waiter.cc",
        "internal/waiter_base.cc",
        "internal/win32_waiter.cc",
        "mutex.cc",
        "notification.cc",
    ],
    exported_headers = [
        "barrier.h",
        "blocking_counter.h",
        "internal/create_thread_identity.h",
        "internal/futex.h",
        "internal/futex_waiter.h",
        "internal/per_thread_sem.h",
        "internal/pthread_waiter.h",
        "internal/sem_waiter.h",
        "internal/stdcpp_waiter.h",
        "internal/waiter.h",
        "internal/waiter_base.h",
        "internal/win32_waiter.h",
        "mutex.h",
        "notification.h",
    ],
    visibility = ["PUBLIC"],
    compiler_flags = ABSL_DEFAULT_COPTS,
    linker_flags = ["-pthread"] + ABSL_DEFAULT_LINKOPTS,
    # TODO
    #linker_flags = select({
    #    "//absl:msvc_compiler": [],
    #    "//absl:clang-cl_compiler": [],
    #    "//absl:wasm": [],
    #    "//conditions:default": ["-pthread"],
    #}) + ABSL_DEFAULT_LINKOPTS,
    exported_deps = [
        ":graphcycles_internal",
        ":kernel_timeout_internal",
        "//absl/base:base",
        "//absl/base:atomic_hook",
        "//absl/base:base_internal",
        "//absl/base:config",
        "//absl/base:core_headers",
        "//absl/base:dynamic_annotations",
        "//absl/base:malloc_internal",
        "//absl/base:raw_logging_internal",
        "//absl/debugging:stacktrace",
        "//absl/debugging:symbolize",
        "//absl/time:time",
    ],
)

cxx_test(
    name = "barrier_test",
    srcs = ["barrier_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":synchronization",
        "//absl/time:time",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "blocking_counter_test",
    srcs = ["blocking_counter_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":synchronization",
        "//absl/time:time",
        "googletest//:gtest_main",
    ],
)

# TODO
#cxx_binary(
#    name = "blocking_counter_benchmark",
#    srcs = ["blocking_counter_benchmark.cc"],
#    compiler_flags = ABSL_TEST_COPTS,
#    linker_flags = ABSL_DEFAULT_LINKOPTS,
#    tags = ["benchmark"],
#    visibility = ["//visibility:private"],
#    deps = [
#        ":synchronization",
#        ":thread_pool",
#        "@com_github_google_benchmark//:benchmark_main",
#    ],
#)

cxx_test(
    name = "graphcycles_test",
    srcs = ["internal/graphcycles_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":graphcycles_internal",
        "//absl/base:core_headers",
        "//absl/base:raw_logging_internal",
        "googletest//:gtest_main",
    ],
)

# TODO
#cxx_test(
#    name = "graphcycles_benchmark",
#    srcs = ["internal/graphcycles_benchmark.cc"],
#    compiler_flags = ABSL_TEST_COPTS,
#    linker_flags = ABSL_DEFAULT_LINKOPTS,
#    tags = [
#        "benchmark",
#    ],
#    exported_deps = [
#        ":graphcycles_internal",
#        "//absl/base:raw_logging_internal",
#        "@com_github_google_benchmark//:benchmark_main",
#    ],
#)

cxx_library(
    name = "thread_pool",
    exported_headers = ["internal/thread_pool.h"],
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    visibility = [
        "//absl/...",
    ],
    exported_deps = [
        ":synchronization",
        "//absl/base:core_headers",
        "//absl/functional:any_invocable",
    ],
)

cxx_test(
    name = "mutex_test",
    srcs = ["mutex_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":synchronization",
        ":thread_pool",
        "//absl/base:base",
        "//absl/base:config",
        "//absl/base:core_headers",
        "//absl/base:raw_logging_internal",
        "//absl/memory:memory",
        "//absl/time:time",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "mutex_method_pointer_test",
    srcs = ["mutex_method_pointer_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":synchronization",
        "//absl/base:config",
        "googletest//:gtest_main",
    ],
)

#cxx_library(
#    name = "mutex_benchmark_common",
#    srcs = ["mutex_benchmark.cc"],
#    compiler_flags = ABSL_TEST_COPTS,
#    linker_flags = ABSL_DEFAULT_LINKOPTS,
#    visibility = [
#        "//absl/synchronization:__pkg__",
#    ],
#    exported_deps = [
#        ":synchronization",
#        ":thread_pool",
#        "//absl/base:base",
#        "//absl/base:config",
#        "@com_github_google_benchmark//:benchmark_main",
#    ],
#    alwayslink = 1,
#)
#
#cxx_binary(
#    name = "mutex_benchmark",
#    compiler_flags = ABSL_DEFAULT_COPTS,
#    linker_flags = ABSL_DEFAULT_LINKOPTS,
#    visibility = ["//visibility:private"],
#    exported_deps = [
#        ":mutex_benchmark_common",
#    ],
#)

cxx_test(
    name = "notification_test",
    srcs = ["notification_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":synchronization",
        "//absl/time:time",
        "googletest//:gtest_main",
    ],
)

cxx_library(
    name = "per_thread_sem_test_common",
    srcs = ["internal/per_thread_sem_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    exported_deps = [
        ":synchronization",
        "//absl/base:base",
        "//absl/base:config",
        "//absl/strings:strings",
        "//absl/time:time",
        "googletest//:gtest",
    ],
)

cxx_test(
    name = "per_thread_sem_test",
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":per_thread_sem_test_common",
        ":synchronization",
        "//absl/strings:strings",
        "//absl/time:time",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "waiter_test",
    srcs = ["internal/waiter_test.cc"],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":kernel_timeout_internal",
        ":synchronization",
        ":thread_pool",
        "//absl/base:config",
        "//absl/random:random",
        "//absl/time:time",
        "googletest//:gtest_main",
    ],
)

cxx_test(
    name = "lifetime_test",
    srcs = [
        "lifetime_test.cc",
    ],
    compiler_flags = ABSL_TEST_COPTS,
    linker_flags = ABSL_DEFAULT_LINKOPTS,
    deps = [
        ":synchronization",
        "//absl/base:core_headers",
        "//absl/base:raw_logging_internal",
    ],
)
