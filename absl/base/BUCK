#
# Copyright 2017 The Abseil Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#load(
#    "//absl:copts/configure_copts.bzl",
#    "ABSL_DEFAULT_COPTS",
#    "ABSL_DEFAULT_LINKOPTS",
#    "ABSL_TEST_COPTS",
#)

cxx_library(
    name = "atomic_hook",
    exported_headers = ["internal/atomic_hook.h"],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
    visibility = [
        "PUBLIC",
#        "//absl/...",
    ],
    exported_deps =  [
        ":config",
        ":core_headers",
    ],
)

cxx_library(
    name = "errno_saver",
    exported_headers = ["internal/errno_saver.h"],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
    visibility = [
        "PUBLIC",
#        "//absl/...",
    ],
    exported_deps =  [":config"],
)

cxx_library(
    name = "log_severity",
    srcs = ["log_severity.cc"],
    exported_headers = ["log_severity.h"],
    visibility = ["PUBLIC"],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
    exported_deps =  [
        ":config",
        ":core_headers",
    ],
)

cxx_library(
    name = "raw_logging_internal",
    srcs = ["internal/raw_logging.cc"],
    exported_headers = ["internal/raw_logging.h"],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
    visibility = [
        "PUBLIC",
#        "//absl/...",
    ],
    exported_deps =  [
        ":atomic_hook",
        ":config",
        ":core_headers",
        ":errno_saver",
        ":log_severity",
    ],
)

cxx_library(
    name = "spinlock_wait",
    headers = [
        "internal/spinlock_akaros.inc",
        "internal/spinlock_linux.inc",
        "internal/spinlock_posix.inc",
        "internal/spinlock_wait.cc",
        "internal/spinlock_win32.inc",
    ],
    exported_headers = ["internal/spinlock_wait.h"],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
    visibility = [ "PUBLIC",
#        "//absl/base:__pkg__",
    ],
    exported_deps =  [
        ":base_internal",
        ":core_headers",
        ":errno_saver",
    ],
)

cxx_library(
    name = "config",
    exported_headers = [
        "config.h",
        "options.h",
        "policy_checks.h",
    ],
    visibility = ["PUBLIC"],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
)

cxx_library(
    name = "cycleclock_internal",
    exported_headers = [
        "internal/cycleclock_config.h",
        "internal/unscaledcycleclock_config.h",
    ],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
    visibility = [
        "PUBLIC",
#        "//absl/...",
    ],
    exported_deps =  [
        ":base_internal",
        ":config",
    ],
)

cxx_library(
    name = "dynamic_annotations",
    exported_headers = [
        "internal/dynamic_annotations.h",
        "dynamic_annotations.h",
    ],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
    visibility = ["PUBLIC"],
    exported_deps =  [
        ":config",
        ":core_headers",
    ],
)

cxx_library(
    name = "core_headers",
    exported_headers = [
        "internal/thread_annotations.h",
        "attributes.h",
        "const_init.h",
        "macros.h",
        "optimization.h",
        "port.h",
        "thread_annotations.h",
    ],
    visibility = ["PUBLIC"],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
    exported_deps =  [
        ":config",
    ],
)

cxx_library(
    name = "malloc_internal",
    srcs = [
        "internal/low_level_alloc.cc",
    ],
    exported_headers = [
        "internal/direct_mmap.h",
        "internal/low_level_alloc.h",
    ],
#    copts = ABSL_DEFAULT_COPTS + select({
#        "//conditions:default": [],
#    }),
#    linkopts = select({
#        "//absl:msvc_compiler": [],
#        "//absl:clang-cl_compiler": [],
#        "//absl:wasm": [],
#        "//conditions:default": ["-pthread"],
#    }) + ABSL_DEFAULT_LINKOPTS,
    visibility = [ "PUBLIC", ],
    exported_deps =  [
        ":base",
        ":base_internal",
        ":config",
        ":core_headers",
        ":dynamic_annotations",
        ":raw_logging_internal",
    ],
)

cxx_library(
    name = "base_internal",
    exported_headers = [
        "internal/hide_ptr.h",
        "internal/identity.h",
        "internal/inline_variable.h",
        "internal/invoke.h",
        "internal/scheduling_mode.h",
    ],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
    visibility = [ "PUBLIC" ],
#        "//absl/...",
    exported_deps =  [
        ":config",
        "//absl/meta:type_traits",
    ],
)

cxx_library(
    name = "base",
    srcs = [
        "internal/cycleclock.cc",
        "internal/spinlock.cc",
        "internal/sysinfo.cc",
        "internal/thread_identity.cc",
        "internal/unscaledcycleclock.cc",
    ],
    exported_headers = [
        "call_once.h",
        "casts.h",
        "internal/cycleclock.h",
        "internal/low_level_scheduling.h",
        "internal/per_thread_tls.h",
        "internal/spinlock.h",
        "internal/sysinfo.h",
        "internal/thread_identity.h",
        "internal/tsan_mutex_interface.h",
        "internal/unscaledcycleclock.h",
    ],
    visibility = [ "PUBLIC"],
    #copts = ABSL_DEFAULT_COPTS,
    #linkopts = select({
    #    "//absl:msvc_compiler": [
    #        "-DEFAULTLIB:advapi32.lib",
    #    ],
    #    "//absl:clang-cl_compiler": [
    #        "-DEFAULTLIB:advapi32.lib",
    #    ],
    #    "//absl:mingw_compiler": [
    #        "-DEFAULTLIB:advapi32.lib",
    #        "-ladvapi32",
    #    ],
    #    "//absl:wasm": [],
    #    "//conditions:default": ["-pthread"],
    #}) + ABSL_DEFAULT_LINKOPTS,
    exported_deps =  [
        ":atomic_hook",
        ":base_internal",
        ":config",
        ":core_headers",
        ":cycleclock_internal",
        ":dynamic_annotations",
        ":log_severity",
        ":raw_logging_internal",
        ":spinlock_wait",
        "//absl/meta:type_traits",
    ],
)

#cxx_library(
#    name = "atomic_hook_test_helper",
#    testonly = 1,
#    srcs = ["internal/atomic_hook_test_helper.cc"],
#    exported_headers = ["internal/atomic_hook_test_helper.h"],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":atomic_hook",
#        ":core_headers",
#    ],
#)
#
#cc_test(
#    name = "atomic_hook_test",
#    size = "small",
#    srcs = ["internal/atomic_hook_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":atomic_hook",
#        ":atomic_hook_test_helper",
#        ":core_headers",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cc_test(
#    name = "bit_cast_test",
#    size = "small",
#    srcs = [
#        "bit_cast_test.cc",
#    ],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":base",
#        ":core_headers",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
cxx_library(
    name = "throw_delegate",
    srcs = ["internal/throw_delegate.cc"],
    exported_headers = ["internal/throw_delegate.h"],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
    visibility = [
        "PUBLIC",
#        "//absl/...",
    ],
    exported_deps =  [
        ":config",
        ":raw_logging_internal",
    ],
)

#cc_test(
#    name = "throw_delegate_test",
#    srcs = ["throw_delegate_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":config",
#        ":throw_delegate",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cc_test(
#    name = "errno_saver_test",
#    size = "small",
#    srcs = ["internal/errno_saver_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":errno_saver",
#        ":strerror",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cxx_library(
#    name = "exception_testing",
#    testonly = 1,
#    exported_headers = ["internal/exception_testing.h"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    visibility = [
#        "//absl/...",
#    ],
#    exported_deps =  [
#        ":config",
#        "@com_google_googletest//:gtest",
#    ],
#)
#
#cxx_library(
#    name = "pretty_function",
#    exported_headers = ["internal/pretty_function.h"],
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    visibility = ["//absl/..."],
#)
#
#cxx_library(
#    name = "exception_safety_testing",
#    testonly = 1,
#    srcs = ["internal/exception_safety_testing.cc"],
#    exported_headers = ["internal/exception_safety_testing.h"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":config",
#        ":pretty_function",
#        "//absl/memory",
#        "//absl/meta:type_traits",
#        "//absl/strings",
#        "//absl/utility",
#        "@com_google_googletest//:gtest",
#    ],
#)
#
#cc_test(
#    name = "exception_safety_testing_test",
#    srcs = ["exception_safety_testing_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":exception_safety_testing",
#        "//absl/memory",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cc_test(
#    name = "inline_variable_test",
#    size = "small",
#    srcs = [
#        "inline_variable_test.cc",
#        "inline_variable_test_a.cc",
#        "inline_variable_test_b.cc",
#        "internal/inline_variable_testing.h",
#    ],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":base_internal",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cc_test(
#    name = "invoke_test",
#    size = "small",
#    srcs = ["invoke_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":base_internal",
#        "//absl/memory",
#        "//absl/strings",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
## Common test library made available for use in non-absl code that overrides
## AbslInternalSpinLockDelay and AbslInternalSpinLockWake.
#cxx_library(
#    name = "spinlock_test_common",
#    testonly = 1,
#    srcs = ["spinlock_test_common.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":base",
#        ":base_internal",
#        ":config",
#        ":core_headers",
#        "//absl/synchronization",
#        "@com_google_googletest//:gtest",
#    ],
#    alwayslink = 1,
#)
#
#cc_test(
#    name = "spinlock_test",
#    size = "medium",
#    srcs = ["spinlock_test_common.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    tags = [
#        "no_test_wasm",
#    ],
#    exported_deps =  [
#        ":base",
#        ":base_internal",
#        ":config",
#        ":core_headers",
#        "//absl/synchronization",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cxx_library(
#    name = "spinlock_benchmark_common",
#    testonly = 1,
#    srcs = ["internal/spinlock_benchmark.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    visibility = [
#        "//absl/base:__pkg__",
#    ],
#    exported_deps =  [
#        ":base",
#        ":base_internal",
#        ":raw_logging_internal",
#        "//absl/synchronization",
#        "@com_github_google_benchmark//:benchmark_main",
#    ],
#    alwayslink = 1,
#)
#
#cc_binary(
#    name = "spinlock_benchmark",
#    testonly = 1,
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    tags = ["benchmark"],
#    visibility = ["//visibility:private"],
#    exported_deps =  [
#        ":spinlock_benchmark_common",
#    ],
#)

cxx_library(
    name = "endian",
    exported_headers = [
        "internal/endian.h",
        "internal/unaligned_access.h",
    ],
    visibility = [ "PUBLIC"],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
    exported_deps =  [
        ":base",
        ":config",
        ":core_headers",
    ],
)

#cc_test(
#    name = "endian_test",
#    srcs = ["internal/endian_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    exported_deps =  [
#        ":config",
#        ":endian",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cc_test(
#    name = "config_test",
#    srcs = ["config_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":config",
#        "//absl/synchronization:thread_pool",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cc_test(
#    name = "call_once_test",
#    srcs = ["call_once_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":base",
#        ":core_headers",
#        "//absl/synchronization",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cc_test(
#    name = "raw_logging_test",
#    srcs = ["raw_logging_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":raw_logging_internal",
#        "//absl/strings",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cc_test(
#    name = "sysinfo_test",
#    size = "small",
#    srcs = ["internal/sysinfo_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":base",
#        "//absl/synchronization",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cc_test(
#    name = "low_level_alloc_test",
#    size = "medium",
#    srcs = ["internal/low_level_alloc_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    tags = [
#        "no_test_ios_x86_64",
#        "no_test_wasm",
#    ],
#    exported_deps =  [
#        ":malloc_internal",
#        "//absl/container:node_hash_map",
#    ],
#)
#
#cc_test(
#    name = "thread_identity_test",
#    size = "small",
#    srcs = ["internal/thread_identity_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    tags = [
#        "no_test_wasm",
#    ],
#    exported_deps =  [
#        ":base",
#        ":core_headers",
#        "//absl/synchronization",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cc_test(
#    name = "thread_identity_benchmark",
#    srcs = ["internal/thread_identity_benchmark.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    tags = ["benchmark"],
#    visibility = ["//visibility:private"],
#    exported_deps =  [
#        ":base",
#        "//absl/synchronization",
#        "@com_github_google_benchmark//:benchmark_main",
#    ],
#)
#
#cxx_library(
#    name = "scoped_set_env",
#    testonly = 1,
#    srcs = ["internal/scoped_set_env.cc"],
#    exported_headers = ["internal/scoped_set_env.h"],
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    visibility = [
#        "//absl/...",
#    ],
#    exported_deps =  [
#        ":config",
#        ":raw_logging_internal",
#    ],
#)
#
#cc_test(
#    name = "scoped_set_env_test",
#    size = "small",
#    srcs = ["internal/scoped_set_env_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":scoped_set_env",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cc_test(
#    name = "log_severity_test",
#    size = "small",
#    srcs = ["log_severity_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":log_severity",
#        "//absl/flags:flag_internal",
#        "//absl/flags:marshalling",
#        "//absl/strings",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
cxx_library(
    name = "strerror",
    srcs = ["internal/strerror.cc"],
    exported_headers = ["internal/strerror.h"],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
    visibility = [ "PUBLIC"],
    exported_deps =  [
        ":config",
        ":core_headers",
        ":errno_saver",
    ],
)

#cc_test(
#    name = "strerror_test",
#    size = "small",
#    srcs = ["internal/strerror_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":strerror",
#        "//absl/strings",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cc_binary(
#    name = "strerror_benchmark",
#    testonly = 1,
#    srcs = ["internal/strerror_benchmark.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    tags = ["benchmark"],
#    visibility = ["//visibility:private"],
#    exported_deps =  [
#        ":strerror",
#        "@com_github_google_benchmark//:benchmark_main",
#    ],
#)

cxx_library(
    name = "fast_type_id",
    exported_headers = ["internal/fast_type_id.h"],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
    visibility = [
        "//absl/...",
    ],
    exported_deps =  [
        ":config",
    ],
)

#cc_test(
#    name = "fast_type_id_test",
#    size = "small",
#    srcs = ["internal/fast_type_id_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":fast_type_id",
#        "@com_google_googletest//:gtest_main",
#    ],
#)

cxx_library(
    name = "prefetch",
    exported_headers = [
        "internal/prefetch.h",
        "prefetch.h",
    ],
    visibility = ["PUBLIC"],
#    copts = ABSL_DEFAULT_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
    exported_deps =  [
        ":config",
        ":core_headers",  # TODO(b/265984188): remove
    ],
)
#
#cc_test(
#    name = "prefetch_test",
#    size = "small",
#    srcs = [
#        "internal/prefetch_test.cc",
#        "prefetch_test.cc",
#    ],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":prefetch",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cc_test(
#    name = "unique_small_name_test",
#    size = "small",
#    srcs = ["internal/unique_small_name_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    linkstatic = 1,
#    exported_deps =  [
#        ":core_headers",
#        "//absl/strings",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
#
#cc_test(
#    name = "optimization_test",
#    size = "small",
#    srcs = ["optimization_test.cc"],
#    copts = ABSL_TEST_COPTS,
#    linkopts = ABSL_DEFAULT_LINKOPTS,
#    exported_deps =  [
#        ":core_headers",
#        "//absl/types:optional",
#        "@com_google_googletest//:gtest_main",
#    ],
#)
